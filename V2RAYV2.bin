#!/bin/bash

backup(){

	bkusr(){
    all_user=$(cat /etc/passwd|grep 'home'|grep 'false'|grep -v 'syslog')
    all_name=('' $(echo "$all_user"|awk -F ':' '{print $1}'))
		clear
		msg -bar
		if [[ -z ${all_name[@]} ]]; then
			print_center -ama "No se encontraron usuarios"
			msg -bar
			enter
			return
		fi
		print_center -ama "CREANDO COPIA DE SEGURIDAD"
		msg -bar
		sleep 2
		local userback
		for u in `echo ${all_name[@]}`; do
      dat=$(echo "$all_user"|grep -w "$u"|cut -d ':' -f5)
      Limit_mode=$(echo "$dat"|cut -d ',' -f1)
      case $Limit_mode in
        token)pass=$(cat ${ADM_user}/passwd_token);;
         hwid)pass="$u";;
            *)pass=$(echo "$dat"|cut -d ',' -f2);;
      esac
			fecha=$(chage -l "$u"|sed -n '4p'|awk -F ': ' '{print $2}')
			EXPTIME="$(($(($(date '+%s' -d "${fecha}") - $(date +%s))) / 86400))"
			stat=$(passwd --status $u|cut -d ' ' -f2)
      userback+="$u|$pass|$EXPTIME|$dat|$stat\n"
		done
		echo -e "$userback" > ${ADM_tmp}/userback.txt
    echo -e "$userback" > /root/userback.txt
		openssl enc -aes-128-cbc -salt -in ${ADM_tmp}/userback.txt -pass pass:ADMRufu -out ${ADM_tmp}/userback.enc > /dev/null 2>&1
		mv ${ADM_tmp}/userback.enc /root/user_$(printf '%(%d-%m-%y_%H:%M:%S)T').ADMRufu
		rm ${ADM_tmp}/userback.txt
		print_center -verd "Copia de seguridad creada."
		enter
		return
	}

  restor(){
    openssl enc -aes-128-cbc -d -in ${ADM_tmp}/userback.enc -pass pass:ADMRufu -out ${ADM_tmp}/userback.txt &>/dev/null 2>&1
    msg -nama " Eliminar todos los usuarios? [S/N]: " && read del_all
    [[ "$del_all" != @(S|s) ]] && msg -nama " Sobrescrivir usuarios exixtentes? [S/N]: " && read reset_user
    all_user=$(cat /etc/passwd|grep 'home'|grep 'false'|grep -v 'syslog')
    if [[ "$del_all" = @(S|s) ]]; then
      service dropbear stop &>/dev/null
      service sshd stop &>/dev/null
      service ssh stop &>/dev/null
      service stunnel4 stop &>/dev/null
      service squid stop &>/dev/null
      title -ama "ELIMINADO TODOS LO USUARIOS...."
      for user_d in `echo "$all_user"|awk -F ':' '{print $1}'`; do
        userpid=$(ps -u $user_d |awk {'print $1'})
        kill "$userpid" 2>/dev/null
        userdel --force $user_d
      done
      service sshd restart &>/dev/null
      service ssh restart &>/dev/null
      service dropbear start &>/dev/null
      service stunnel4 start &>/dev/null
      service squid restart &>/dev/null
    fi
    clear
    msg -bar
    print_center -ama "RESTAURANDO COPIA"
    msg -bar
    all_name=($(echo "$all_user"|awk -F ':' '{print $1}'))
    while read line; do
      user=$(echo $line|cut -d '|' -f1)
      pass=$(echo $line|cut -d '|' -f2)

      dias=$(( $(echo $line|cut -d '|' -f3) + 1 ))

      if [[ "$dias" -lt 1 ]]; then dias=0 ;fi

      dat=$(echo $line|cut -d '|' -f4)
      stat=$(echo $line|cut -d '|' -f5)

      if [[ $(echo "${all_name[@]}"|grep "$user") = "" ]]; then
        valid=$(date '+%C%y-%m-%d' -d " +$dias days")
        msg -nama " $user"
        if useradd -M -s /bin/false -e ${valid} -K PASS_MAX_DAYS=$dias -p $(openssl passwd -6 $pass) -c $dat $user ; then
          [[ "$stat" = "P" ]] && usermod -U $user || usermod -L $user
          msg -verd " $(fun_trans "Restaurado")"
        else
          msg -verm2 " $(fun_trans "NO, Usuario no Restaurado")"
        fi 
      else
        if [[ "$reset_user" = @(S|s) ]]; then
          userpid=$(ps -u $user |awk {'print $1'})
          kill "$userpid" 2>/dev/null
          userdel --force $user
          if useradd -M -s /bin/false -e ${valid} -K PASS_MAX_DAYS=$dias -p $(openssl passwd -6 $pass) -c $dat $user ; then
            [[ "$stat" = "P" ]] && usermod -U $user || usermod -L $user
            msg -verd " $(fun_trans "Restaurado")"
          else
            msg -verm2 " $(fun_trans "NO, Usuario no Restaurado")"
          fi
        else
            echo -e " $(msg -ama "$user") $(msg -verm2 "Ya Existe")"
        fi
      fi
    done <<< $(cat "${ADM_tmp}/userback.txt")

    rm ${ADM_tmp}/userback.enc
    rm ${ADM_tmp}/userback.txt
    enter

  }

	rsurs(){
		clear
		msg -bar
		print_center -ama "RESTAURAR COPIA DE SEGURIDAD"
		msg -bar
		n=0
		for i in ${backls[@]}; do
      let n++
			echo -e " $(msg -verd "[$n]") $(msg -verm2 ">") $(msg -azu "$i")"
		done
		back
    opcion=$(selection_fun $n)
		[[ "$opcion" = "0" ]] && return
		let opcion--
		cp /root/${backls[$opcion]} ${ADM_tmp}/userback.enc
    restor
    return
	}

	clbk(){
		rm -rf /root/*.ADMRufu
		clear
		msg -bar
		print_center -ama "REGITRO DE COPIAS ELIMINADO"
		enter
	}

  rest_online(){
    title -ama "URL DE COPIA EN LINEA"
    echo -e " $(msg -verm3 "╭╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼[")$(msg -azu "INGRESA EL URL")$(msg -verm3 "]")"
    echo -ne " $(msg -verm3 "╰╼")\033[37;1m> " && read url
    [[ -z "$url" ]] && return
    wget -O ${ADM_tmp}/userback.enc "${url}" &>/dev/null; chmod +x ${ADM_tmp}/userback.enc
    restor
    return
  }

	backls=($(ls /root|grep '.ADMRufu'))
	var="${#backls[@]}"
	[[ ${var} = "0" ]] && bkusr && return
	title "RESPALDO DE USUARIOS"
	menu_func "CREAR NUEVO RESPALDO DE USUARIOS" "RESTAURAR RESPALDO DE USUARIOS" "RESPALDO EN LINEA $(msg -verm2 "beta")" "LIMPIAR REGISTRO DE COPIAS"
	back
	msg -ne " opcion: "
	read opcion
	case $opcion in
		1)bkusr;;
		2)rsurs;;
		3)rest_online;;
		4)clbk;;
		0)return;;
	esac
}

# interfas de colores
msg(){
  COLOR[0]='\033[1;37m' #BRAN='\033[1;37m'
  COLOR[1]='\e[31m' #VERMELHO='\e[31m'
  COLOR[2]='\e[32m' #VERDE='\e[32m'
  COLOR[3]='\e[33m' #AMARELO='\e[33m'
  COLOR[4]='\e[34m' #AZUL='\e[34m'
  COLOR[5]='\e[91m' #MAGENTA='\e[35m'
  COLOR[6]='\033[1;97m' #MAG='\033[1;36m'
  COLOR[7]='\e[36m' #teal='\e[36m'
  COLOR[8]='\e[30m' #negro='\e[30m'
  COLOR[9]='\033[34m' #blue='\033[1;34m'

  NEGRITO='\e[1m'
  SEMCOR='\e[0m'

  case $1 in
    -ne)   cor="${COLOR[1]}${NEGRITO}" && echo -ne "${cor}${2}${SEMCOR}";;
    -nazu) cor="${COLOR[6]}${NEGRITO}" && echo -ne "${cor}${2}${SEMCOR}";;
    -nverd)cor="${COLOR[2]}${NEGRITO}" && echo -ne "${cor}${2}${SEMCOR}";;
    -nama) cor="${COLOR[3]}${NEGRITO}" && echo -ne "${cor}${2}${SEMCOR}";;
    -ama)  cor="${COLOR[3]}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
    -verm) cor="${COLOR[3]}${NEGRITO}[!] ${COLOR[1]}" && echo -e "${cor}${2}${SEMCOR}";;
    -verm2)cor="${COLOR[1]}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
    -verm3)cor="${COLOR[1]}" && echo -e "${cor}${2}${SEMCOR}";;
    -teal) cor="${COLOR[7]}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
    -teal2)cor="${COLOR[7]}" && echo -e "${cor}${2}${SEMCOR}";;
    -blak) cor="${COLOR[8]}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
    -blak2)cor="${COLOR[8]}" && echo -e "${cor}${2}${SEMCOR}";;
    -azu)  cor="${COLOR[6]}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
    -blu)  cor="${COLOR[9]}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
    -blu1) cor="${COLOR[9]}" && echo -e "${cor}${2}${SEMCOR}";;
    -verd) cor="${COLOR[2]}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
    -bra)  cor="${COLOR[0]}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
    -bar)  cor="${COLOR[1]}=====================================================" && echo -e "${SEMCOR}${cor}${SEMCOR}";;
    -bar2) cor="${COLOR[7]}=====================================================" && echo -e "${SEMCOR}${cor}${SEMCOR}";;
    -bar3) cor="${COLOR[1]}-----------------------------------------------------" && echo -e "${SEMCOR}${cor}${SEMCOR}";;
    -bar4) cor="${COLOR[7]}-----------------------------------------------------" && echo -e "${SEMCOR}${cor}${SEMCOR}";;
  esac
}

# centrado de texto
print_center(){
  if [[ -z $2 ]]; then
    text="$1"
  else
    col="$1"
    text="$2"
  fi

  while read line; do
    unset space
    x=$(( ( 54 - ${#line}) / 2))
    for (( i = 0; i < $x; i++ )); do
      space+=' '
    done
    space+="$line"
    if [[ -z $2 ]]; then
      msg -azu "$space"
    else
      msg "$col" "$space"
    fi
  done <<< $(echo -e "$text")
}
#print_center2(){
#    local x
#    local y
#    #text="$*"
#    text="$2"
#    #x=$(( ($(tput cols) - ${#text}) / 2))
#    x=$(( ( 54 - ${#text}) / 2))
#    echo -ne "\E[6n";read -sdR y; y=$(echo -ne "${y#*[}" | cut -d';' -f1)
#    #echo -e "\033[${y};${x}f$*"
#    msg "$1" "\033[${y};${x}f$2"
#}

# titulos y encabesados
title(){
    clear
    msg -bar
    if [[ -z $2 ]]; then
      print_center -azu "$1"
    else
      print_center "$1" "$2"
    fi
    msg -bar
 }

# finalizacion de tareas
 enter(){
  msg -bar
  text="►► Presione enter para continuar ◄◄"
  if [[ -z $1 ]]; then
    print_center -ama "$text"
  else
    print_center "$1" "$text"
  fi
  read
 }

# opcion, regresar volver/atras
back(){
    msg -bar
    echo -ne "$(msg -verd " [0]") $(msg -verm2 ">") " && msg -bra "\033[1;41mVOLVER"
    msg -bar
 }

# menu maker (opciones 1, 2, 3,.....)
menu_func(){
  local options=${#@}
  local array
  for((num=1; num<=$options; num++)); do
    echo -ne "$(msg -verd " [$num]") $(msg -verm2 ">") "
    array=(${!num})
    case ${array[0]} in
      "-vd")echo -e "\033[1;33m[!]\033[1;32m ${array[@]:1}";;
      "-vm")echo -e "\033[1;33m[!]\033[1;31m ${array[@]:1}";;
      "-fi")echo -e "${array[@]:2} ${array[1]}";;
      -bar|-bar2|-bar3|-bar4)echo -e "\033[1;37m${array[@]:1}\n$(msg ${array[0]})";;
      *)echo -e "\033[1;37m${array[@]}";;
    esac
  done
 }

# opcion de seleccion numerica
selection_fun(){
  local selection="null"
  local range
  if [[ -z $2 ]]; then
    opcion=$1
    col="-nazu"
  else
    opcion=$2
    col=$1
  fi
  for((i=0; i<=$opcion; i++)); do range[$i]="$i "; done
  while [[ ! $(echo ${range[*]}|grep -w "$selection") ]]; do
    msg "$col" " Selecione una Opcion: " >&2
    read selection
    tput cuu1 >&2 && tput dl1 >&2
  done
  echo $selection
}

in_opcion(){
  unset opcion
  if [[ -z $2 ]]; then
      msg -nazu " $1: " >&2
  else
      msg $1 " $2: " >&2
  fi
  read opcion
  echo "$opcion"
}

in_opcion_down(){
  dat=$1
  length=${#dat}
  cal=$(( 22 - $length / 2 ))
  line=''
  for (( i = 0; i < $cal; i++ )); do
    line+='╼'
  done
  echo -e " $(msg -verm3 "╭$line╼[")$(msg -azu "$dat")$(msg -verm3 "]")"
  echo -ne " $(msg -verm3 "╰╼")\033[37;1m> " && read opcion
}

export -f msg
export -f selection_fun
export -f menu_func
export -f print_center
export -f title
export -f back
export -f enter
export -f in_opcion
export -f in_opcion_down
#--------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------
fun_ip(){
  if [[ -e ${ADM_tmp}/MEUIPADM ]]; then
    echo "$(cat ${ADM_tmp}/MEUIPADM)"
  else
    MEU_IP=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
    MEU_IP2=$(wget -qO- ipv4.icanhazip.com)
    [[ "$MEU_IP" != "$MEU_IP2" ]] && IP="$MEU_IP2" && echo "$MEU_IP2" || IP="$MEU_IP" && echo "$MEU_IP"
    echo "$MEU_IP2" > ${ADM_tmp}/MEUIPADM
  fi
}

fun_eth(){
	eth=$(ifconfig | grep -v inet6 | grep -v lo | grep -v 127.0.0.1 | grep "encap:Ethernet" | awk '{print $1}')
    [[ $eth != "" ]] && {
    	msg -bar
    	msg -ama " $(fun_trans "Aplicar el sistema para mejorar los paquetes SSH?")"
    	msg -ama " $(fun_trans "Opciones para usuarios avanzados")"
    	msg -bar
    	read -p " [S/N]: " -e -i n sshsn
    	[[ "$sshsn" = @(s|S|y|Y) ]] && {
    		echo -e "${cor[1]} $(fun_trans "Correccion de problemas de paquetes en SSH ...")"
            echo -e " $(fun_trans "¿Cual es la tasa RX?")"
            echo -ne "[ 1 - 999999999 ]: "; read rx
            [[ "$rx" = "" ]] && rx="999999999"
            echo -e " $(fun_trans "¿Cual es la tasa TX?")"
            echo -ne "[ 1 - 999999999 ]: "; read tx
            [[ "$tx" = "" ]] && tx="999999999"
            apt-get install ethtool -y > /dev/null 2>&1
            ethtool -G $eth rx $rx tx $tx > /dev/null 2>&1
        }
        msg -bar
    }
}


fun_trans(){ 
	local texto
	local retorno
	declare -A texto
	SCPidioma="${ADM_tmp}/idioma"
	[[ ! -e ${SCPidioma} ]] && touch ${SCPidioma}
	local LINGUAGE=$(cat ${SCPidioma})
	[[ -z $LINGUAGE ]] && LINGUAGE=es
	[[ $LINGUAGE = "es" ]] && echo "$@" && return
	[[ ! -e /usr/bin/trans ]] && wget -O /usr/bin/trans https://raw.githubusercontent.com/rudi9999/VPS-MX-8.0/master/ArchivosUtilitarios/trans &> /dev/null
	[[ ! -e ${ADM_tmp}/texto-adm ]] && touch ${ADM_tmp}/texto-adm
	source ${ADM_tmp}/texto-adm
	if [[ -z "$(echo ${texto[$@]})" ]]; then
		#ENGINES=(aspell google deepl bing spell hunspell apertium yandex)
		#NUM="$(($RANDOM%${#ENGINES[@]}))"
		retorno="$(source trans -e bing -b es:${LINGUAGE} "$@"|sed -e 's/[^a-z0-9 -]//ig' 2>/dev/null)"
		echo "texto[$@]='$retorno'"  >> ${ADM_tmp}/texto-adm
		echo "$retorno"
	else
		echo "${texto[$@]}"
	fi
}

USRdatabase="${ADM_user}/ADMuser"
[[ ! -d ${ADM_user}/B-ADMuser ]] && mkdir ${ADM_user}/B-ADMuser

err_fun(){
  case $1 in
    1)tput cuu1; tput dl1 && msg -verm "$(fun_trans "Cliente Nulo")"; sleep 2s; tput cuu1; tput dl1;;
    2)tput cuu1; tput dl1 && msg -verm "$(fun_trans "Nombre de Cliente muy corto")"; sleep 2s; tput cuu1; tput dl1;;
    3)tput cuu1; tput dl1 && msg -verm "$(fun_trans "Nombre de Cliente muy largo")"; sleep 2s; tput cuu1; tput dl1;;
    4)tput cuu1; tput dl1 && msg -verm "$(fun_trans "Contraseña Nula")"; sleep 2s; tput cuu1; tput dl1;;
    5)tput cuu1; tput dl1 && msg -verm "$(fun_trans "HWID corto, verifi catidad caracteres")"; sleep 2s; tput cuu1; tput dl1;;
    6)tput cuu1; tput dl1 && msg -verm "$(fun_trans "HWID largo, verifi catidad caracteres")"; sleep 2s; tput cuu1; tput dl1;;
    7)tput cuu1; tput dl1 && msg -verm "$(fun_trans "Duracion Nula")"; sleep 2s; tput cuu1; tput dl1;;
    8)tput cuu1; tput dl1 && msg -verm "$(fun_trans "Duracion invalida utilize numeros")"; sleep 2s; tput cuu1; tput dl1;;
    9)tput cuu1; tput dl1 && msg -verm "$(fun_trans "Duracion maxima y de un año")"; sleep 2s; tput cuu1; tput dl1;;
    11)tput cuu1; tput dl1 && msg -verm "$(fun_trans "Limite Nulo")"; sleep 2s; tput cuu1; tput dl1;;
    12)tput cuu1; tput dl1 && msg -verm "$(fun_trans "Limite invalido utilize numeros")"; sleep 2s; tput cuu1; tput dl1;;
    13)tput cuu1; tput dl1 && msg -verm "$(fun_trans "Limite maximo de 999")"; sleep 2s; tput cuu1; tput dl1;;
    14)tput cuu1; tput dl1 && msg -verm "$(fun_trans "Cliente o HWID ya existe")"; sleep 2s; tput cuu1; tput dl1;;
  esac
}

data_user(){
  cat_users=$(cat "/etc/passwd"|grep 'home'|grep 'false'|grep -v 'syslog')
  [[ -z "$(echo "${cat_users}"|awk -F ':' '{print $5}'|cut -d ',' -f1|grep -w 'hwid'|head -1)" ]] && print_center -verm2 "NO HAY CLIENTES HWID REGISTRADOS" && return 1
	dat_us=$(printf '%-20s%-12s%-8s%s' 'Cliente' 'Fecha' 'Dias' 'Statu')
	msg -azu "  N°  $dat_us"
	msg -bar

	i=1
	for u in `echo "${cat_users}"|awk -F ':' '{print $1}'`; do

    fix_hwid_token=$(echo "${cat_users}"|grep -w "$u"|awk -F ':' '{print $5}'|cut -d ',' -f1) && [[ "${fix_hwid_token}" != @(hwid) ]] && continue

		fecha=$(chage -l "$u"|sed -n '4p'|awk -F ': ' '{print $2}')

		mes_dia=$(echo $fecha|awk -F ',' '{print $1}'|sed 's/ //g')
		ano=$(echo $fecha|awk -F ', ' '{printf $2}'|cut -c 3-)
		us=$(printf '%-12s' "$u")

		pass=$(cat "/etc/passwd"|grep -w "$u"|awk -F ':' '{print $5}'|cut -d ',' -f2)
		[[ "${#pass}" -gt '12' ]] && pass="Desconosida"
		pass="$(printf '%-19s' "$pass")"

		unset stat
		if [[ $(passwd --status $u|cut -d ' ' -f2) = "P" ]]; then
			stat="$(msg -verd "ULK")"
		else
			stat="$(msg -verm2 "LOK")"
		fi

		echo -ne "  $(msg -verd "$i)")$(msg -verm2 "-") $(msg -azu "${pass}")"
		if [[ $(echo $fecha|awk '{print $2}') = "" ]]; then
			exp="$(printf '%8s%-2s' '[X]')"
			exp+="$(printf '%-6s' '[X]')"
			echo " $(msg -verm2 "$fecha")$(msg -verd "$exp")$(echo -e "$stat")"	
		else
			if [[ $(date +%s) -gt $(date '+%s' -d "${fecha}") ]]; then
				exp="$(printf '%-5s' "Exp")"
				echo " $(msg -verm2 "$mes_dia/$ano")  $(msg -verm2 "$exp")$(echo -e "$stat")"
			else
				EXPTIME="$(($(($(date '+%s' -d "${fecha}") - $(date +%s))) / 86400))"
				if [[ "${#EXPTIME}" = "1" ]]; then
            exp="$(printf '%6s%-7s' "$EXPTIME")"
        elif [[ "${#EXPTIME}" = "2" ]]; then
            exp="$(printf '%7s%-6s' "$EXPTIME")"
        else
            exp="$(printf '%7s%-5s' "$EXPTIME")"
        fi
				echo " $(msg -verm2 "$mes_dia/$ano")$(msg -verd "$exp")$(echo -e "$stat")"
			fi
		fi
    echo -e "      $(msg -ama "HWID:") $(msg -azu "${us}")"
    msg -bar3
		let i++
	done
  tput cuu1 && tput dl1

}

#!/bin/bash
#!/bin/bash
restart(){
	title "REINICIANDO V2RAY"
	if [[ "$(v2ray restart|awk '{printf $3}')" = "success" ]]; then
		print_center -verd "v2ray restart success !"
	else
		print_center -verm2 "v2ray restart fail !"
	fi
	msg -bar
	sleep 3
}

ins_v2r(){
	title "ESTA POR INSTALAR V2RAY!"
	print_center -ama "La instalacion puede tener alguna fallas!\npor favor observe atentamente el log de intalacion.\npodria contener informacion sobre algunos errores!\ny deveran corregirse de forma manual antes de\ncontinuar usando el script."
	enter
	source <(curl -sSL https://raw.githubusercontent.com/rudi9999/ADMRufu/main/Utils/v2ray/v2ray.sh)
	#source <(curl -sL https://multi.netlify.app/v2ray.sh)
}

v2ray_tls(){
	db="$(ls ${ADM_crt})"
    if [[ ! "$(echo "$db"|grep '.crt')" = "" ]]; then
        cert=$(echo "$db"|grep '.crt')
        key=$(echo "$db"|grep '.key')
        DOMI=$(cat "${ADM_src}/dominio.txt")
        title "CERTIFICADO SSL ENCONTRADO"
        echo -e "$(msg -azu "DOMI:") $(msg -ama "$DOMI")"
        echo -e "$(msg -azu "CERT:") $(msg -ama "$cert")"
        echo -e "$(msg -azu "KEY:")  $(msg -ama "$key")"
        msg -bar
        msg -ne " Continuar, usando este certificado [S/N]: " && read opcion_tls

        if [[ $opcion_tls = @(S|s) ]]; then
            cert=$(jq --arg a "${ADM_crt}/$cert" --arg b "${ADM_crt}/$key" '.inbounds[].streamSettings.tlsSettings += {"certificates":[{"certificateFile":$a,"keyFile":$b}]}' < $config)
            domi=$(echo "$cert"|jq --arg a "$DOMI" '.inbounds[] += {"domain":$a}')
            echo "$domi"|jq --arg a 'tls' '.inbounds[].streamSettings += {"security":$a}' > $temp
            chmod 777 $temp
            mv -f $temp $config
            restart
            return
        fi
    fi

	title "CERTIFICADO TLS V2RAY"
	echo -e "\033[1;37m"
	v2ray tls
	enter
 }

removeV2Ray(){
    #V2ray
    bash <(curl -L -s https://multi.netlify.app/go.sh) --remove >/dev/null 2>&1
    rm -rf /etc/v2ray >/dev/null 2>&1
    rm -rf /var/log/v2ray >/dev/null 2>&1

    #Xray
    bash <(curl -L -s https://multi.netlify.app/go.sh) --remove -x >/dev/null 2>&1
    rm -rf /etc/xray >/dev/null 2>&1
    rm -rf /var/log/xray >/dev/null 2>&1

    #v2ray iptable
    bash <(curl -L -s https://multi.netlify.app/v2ray_util/global_setting/clean_iptables.sh)

    #multi-v2ray
    pip uninstall v2ray_util -y
    rm -rf /usr/share/bash-completion/completions/v2ray.bash >/dev/null 2>&1
    rm -rf /usr/share/bash-completion/completions/v2ray >/dev/null 2>&1
    rm -rf /usr/share/bash-completion/completions/xray >/dev/null 2>&1
    rm -rf /etc/bash_completion.d/v2ray.bash >/dev/null 2>&1
    rm -rf /usr/local/bin/v2ray >/dev/null 2>&1
    rm -rf /etc/v2ray_util >/dev/null 2>&1

    #v2ray
    crontab -l|sed '/SHELL=/d;/v2ray/d'|sed '/SHELL=/d;/xray/d' > crontab.txt
    crontab crontab.txt >/dev/null 2>&1
    rm -f crontab.txt >/dev/null 2>&1

    systemctl restart cron >/dev/null 2>&1

    #multi-v2ray
    sed -i '/v2ray/d' ~/.bashrc
    sed -i '/xray/d' ~/.bashrc
    source ~/.bashrc

    clear
    msg -bar
    print_center "V2RAY REMOVIDO!"
    enter
    return 1
}

 v2ray_stream(){
 	title "PROTOCOLOS V2RAY"
 	echo -e "\033[1;37m"
	v2ray stream
	msg -bar
	read foo
 }

 port(){
 	port=$(jq -r '.inbounds[].port' $config)
 	title "CONFING PERTO V2RAY"
	print_center -azu "puerto actual: $(msg -ama "$port")"
	back
	in_opcion "Nuevo puerto"
	opcion=$(echo "$opcion" | tr -d '[[:space:]]')
	tput cuu1 && tput dl1
	if [[ -z "$opcion" ]]; then
		msg -ne " deves ingresar una opcion"
		sleep 2
		return
	elif [[ ! $opcion =~ $numero ]]; then
		msg -ne " solo deves ingresar numeros"
		sleep 2
		return
	elif [[ "$opcion" = "0" ]]; then
		return
	fi
	mv $config $temp
	jq --argjson a "$opcion" '.inbounds[] += {"port":$a}' < $temp >> $config
	chmod 777 $config
	rm $temp
	restart
 }

 alterid(){
 	aid=$(jq -r '.inbounds[].settings.clients[0].alterId' $config)
 	title "CONFING alterId V2RAY"
	print_center -azu "alterid actual: $(msg -ama "$aid")"
	back
	in_opcion "Nuevo alterid"
	opcion=$(echo "$opcion" | tr -d '[[:space:]]')
	tput cuu1 && tput dl1
	if [[ -z "$opcion" ]]; then
		msg -ne " deves ingresar una opcion"
		sleep 2
		return
	elif [[ ! $opcion =~ $numero ]]; then
		msg -ne " solo deves ingresar numeros"
		sleep 2
		return
	elif [[ "$opcion" = "0" ]]; then
		return
	fi
	mv $config $temp
	jq --argjson a "$opcion" '.inbounds[].settings.clients[] += {"alterId":$a}' < $temp >> $config
	chmod 777 $config
	rm $temp
	restart
 }

 n_v2ray(){
 	title "CONFIGRACION NATIVA V2RAY"
 	echo -ne "\033[1;37m"
	v2ray
 }

 address(){
 	add=$(jq -r '.inbounds[].domain' $config) && [[ $add = null ]] && add=$(wget -qO- ipv4.icanhazip.com)
 	title "CONFING address V2RAY"
	print_center -azu "actual: $(msg -ama "$add")"
	back
	in_opcion "Nuevo address"
	opcion=$(echo "$opcion" | tr -d '[[:space:]]')
	tput cuu1 && tput dl1
	if [[ -z "$opcion" ]]; then
		msg -ne " deves ingresar una opcion"
		sleep 2
		return
	elif [[ "$opcion" = "0" ]]; then
		return
	fi
	mv $config $temp
	jq --arg a "$opcion" '.inbounds[] += {"domain":$a}' < $temp >> $config
	chmod 777 $config
	rm $temp
	restart
 }

 host(){
 	host=$(jq -r '.inbounds[].streamSettings.wsSettings.headers.Host' $config) && [[ $host = null ]] && host='sin host'
 	title "CONFING host V2RAY"
	print_center -azu "Actual: $(msg -ama "$host")"
	back
	in_opcion "Nuevo host"
	opcion=$(echo "$opcion" | tr -d '[[:space:]]')
	tput cuu1 && tput dl1
	if [[ -z "$opcion" ]]; then
		msg -ne " deves ingresar una opcion"
		sleep 2
		return
	elif [[ "$opcion" = "0" ]]; then
		return
	fi
	mv $config $temp
	jq --arg a "$opcion" '.inbounds[].streamSettings.wsSettings.headers += {"Host":$a}' < $temp >> $config
	chmod 777 $config
	rm $temp
	restart
 }

 path(){
 	path=$(jq -r '.inbounds[].streamSettings.wsSettings.path' $config) && [[ $path = null ]] && path=''
 	title "CONFING path V2RAY"
	print_center -azu "Actual: $(msg -ama "$path")"
	back
	in_opcion "Nuevo path"
	opcion=$(echo "$opcion" | tr -d '[[:space:]]')
	tput cuu1 && tput dl1
	if [[ -z "$opcion" ]]; then
		msg -ne " deves ingresar una opcion"
		sleep 2
		return
	elif [[ "$opcion" = "0" ]]; then
		return
	fi
	mv $config $temp
	jq --arg a "$opcion" '.inbounds[].streamSettings.wsSettings += {"path":$a}' < $temp >> $config
	chmod 777 $config
	rm $temp
	restart
 }

 reset(){
 	title "RESTAURANDO AJUSTES V2RAY"
 	#resolver imprecion de texto
 	user=$(jq -c '.inbounds[].settings.clients' < $config)

 	v2ray new
 	jq 'del(.inbounds[].streamSettings.kcpSettings[])' < $config > $temp
 	rm $config
    jq '.inbounds[].streamSettings += {"network":"ws","wsSettings":{"path": "/ADMRufu/","headers": {"Host": "ejemplo.com"}}}' < $temp > $config
    chmod 777 $config
    rm $temp
    sleep 2
    if [[ ! -z "$user" ]]; then
    	title "RESATURANDO USUARIOS"
    	mv $config $temp
    	jq --argjson a "$user" '.inbounds[].settings += {"clients":$a}' < $temp > $config
    	chmod 777 $config
    	sleep 2
    	restart
    fi
 }

while :
do
	clear
	msg -bar
	print_center -verd "CONFIGURADOR DE V2RAY By @HellBoyVps"
	msg -bar
	msg -ama "INSTALACION"
	msg -bar3
	menu_func "$(msg -verd "INSTALAR/RE-REINSTALAR V2RAY")" \
	"$(msg -verm2 "DESINSTALAR V2RAY")\n$(msg -bar3)\n$(msg -ama "CONFIGRACION")\n$(msg -bar3)" \
	"CERFIFICADO SSL/TLS $(msg -ama "(menu nativo)")" \
	"PROTOCOLOS $(msg -ama "(menu nativo)")" \
	"PUERTO" \
	"ALTERID" \
	"CONF V2RAY $(msg -ama "(menu nativo)")"\
	"AGREGAR/MODIFICAR HOST FAKE" \
	"AGREGAR/MODIFICAR PATCH" \
	"REESTABLECER AJUSTES" 
	back
	opcion=$(selection_fun 12)
	case $opcion in
		1)ins_v2r;;
		2)removeV2Ray;;
		3)v2ray_tls;;
		4)v2ray_stream;;
		5)port;;
		6)alterid;;
		7)n_v2ray;;
		8)address;;
		9)host;;
		10)path;;
		11)reset;;
		0)break;;
	esac
	[[ "$?" = "1" ]] && break
done
return 1